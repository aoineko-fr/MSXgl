//  ██▀▀█▀▀██▀▀▀▀▀▀▀█▀▀█            ▄▄   ▄▄
//  ██  ▀  █▄  ▀██▄ ▀ ▄█  ▄█▄█ ▄▀██ ██▀  ██▄
//  █  █ █  ▀▀  ▄█  █  █  ██ █ ▀▄██ ▀█▄▄ ██ █
//  ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
// ─────────────────────────────────────────────────────────────────────────────
//  MSXmath 1.7.1 by Guillaume "Aoineko" Blanchard
//  under CC-BY-SA free license
// 
//  Generated: Fri Oct 10 00:32:45 2025
//  Parameters: Entries=128, Bytes=2 (16-bits), Shift=8 (Q8.8)
// ─────────────────────────────────────────────────────────────────────────────

//  Sinus table. Range [0:Pi*2[
const unsigned short g_Sinus128[] = {
	0x0000, 0x000D, 0x0019, 0x0026, 0x0032, 0x003E, 0x004A, 0x0056, 
	0x0062, 0x006D, 0x0079, 0x0084, 0x008E, 0x0098, 0x00A2, 0x00AC, 
	0x00B5, 0x00BE, 0x00C6, 0x00CE, 0x00D5, 0x00DC, 0x00E2, 0x00E7, 
	0x00ED, 0x00F1, 0x00F5, 0x00F8, 0x00FB, 0x00FD, 0x00FF, 0x0100, 
	0x0100, 0x0100, 0x00FF, 0x00FD, 0x00FB, 0x00F8, 0x00F5, 0x00F1, 
	0x00ED, 0x00E7, 0x00E2, 0x00DC, 0x00D5, 0x00CE, 0x00C6, 0x00BE, 
	0x00B5, 0x00AC, 0x00A2, 0x0098, 0x008E, 0x0084, 0x0079, 0x006D, 
	0x0062, 0x0056, 0x004A, 0x003E, 0x0032, 0x0026, 0x0019, 0x000D, 
	0x0000, 0xFFF3, 0xFFE7, 0xFFDA, 0xFFCE, 0xFFC2, 0xFFB6, 0xFFAA, 
	0xFF9E, 0xFF93, 0xFF87, 0xFF7C, 0xFF72, 0xFF68, 0xFF5E, 0xFF54, 
	0xFF4B, 0xFF42, 0xFF3A, 0xFF32, 0xFF2B, 0xFF24, 0xFF1E, 0xFF19, 
	0xFF13, 0xFF0F, 0xFF0B, 0xFF08, 0xFF05, 0xFF03, 0xFF01, 0xFF00, 
	0xFF00, 0xFF00, 0xFF01, 0xFF03, 0xFF05, 0xFF08, 0xFF0B, 0xFF0F, 
	0xFF13, 0xFF19, 0xFF1E, 0xFF24, 0xFF2B, 0xFF32, 0xFF3A, 0xFF42, 
	0xFF4B, 0xFF54, 0xFF5E, 0xFF68, 0xFF72, 0xFF7C, 0xFF87, 0xFF93, 
	0xFF9E, 0xFFAA, 0xFFB6, 0xFFC2, 0xFFCE, 0xFFDA, 0xFFE7, 0xFFF3, 
};

//  Cosinus table. Range [0:Pi*2[
const unsigned short g_Cosinus128[] = {
	0x0100, 0x0100, 0x00FF, 0x00FD, 0x00FB, 0x00F8, 0x00F5, 0x00F1, 
	0x00ED, 0x00E7, 0x00E2, 0x00DC, 0x00D5, 0x00CE, 0x00C6, 0x00BE, 
	0x00B5, 0x00AC, 0x00A2, 0x0098, 0x008E, 0x0084, 0x0079, 0x006D, 
	0x0062, 0x0056, 0x004A, 0x003E, 0x0032, 0x0026, 0x0019, 0x000D, 
	0x0000, 0xFFF3, 0xFFE7, 0xFFDA, 0xFFCE, 0xFFC2, 0xFFB6, 0xFFAA, 
	0xFF9E, 0xFF93, 0xFF87, 0xFF7C, 0xFF72, 0xFF68, 0xFF5E, 0xFF54, 
	0xFF4B, 0xFF42, 0xFF3A, 0xFF32, 0xFF2B, 0xFF24, 0xFF1E, 0xFF19, 
	0xFF13, 0xFF0F, 0xFF0B, 0xFF08, 0xFF05, 0xFF03, 0xFF01, 0xFF00, 
	0xFF00, 0xFF00, 0xFF01, 0xFF03, 0xFF05, 0xFF08, 0xFF0B, 0xFF0F, 
	0xFF13, 0xFF19, 0xFF1E, 0xFF24, 0xFF2B, 0xFF32, 0xFF3A, 0xFF42, 
	0xFF4B, 0xFF54, 0xFF5E, 0xFF68, 0xFF72, 0xFF7C, 0xFF87, 0xFF93, 
	0xFF9E, 0xFFAA, 0xFFB6, 0xFFC2, 0xFFCE, 0xFFDA, 0xFFE7, 0xFFF3, 
	0x0000, 0x000D, 0x0019, 0x0026, 0x0032, 0x003E, 0x004A, 0x0056, 
	0x0062, 0x006D, 0x0079, 0x0084, 0x008E, 0x0098, 0x00A2, 0x00AC, 
	0x00B5, 0x00BE, 0x00C6, 0x00CE, 0x00D5, 0x00DC, 0x00E2, 0x00E7, 
	0x00ED, 0x00F1, 0x00F5, 0x00F8, 0x00FB, 0x00FD, 0x00FF, 0x0100, 
};

//  Tangent table. Range [-Pi/2:Pi/2[
const unsigned short g_Tangent128[] = {
	0x7FFF, 0xD744, 0xEBA5, 0xF271, 0xF5D9, 0xF7E4, 0xF942, 0xFA3D, 
	0xFAF9, 0xFB8C, 0xFC02, 0xFC63, 0xFCB4, 0xFCF9, 0xFD35, 0xFD68, 
	0xFD96, 0xFDBE, 0xFDE3, 0xFE03, 0xFE21, 0xFE3C, 0xFE55, 0xFE6C, 
	0xFE81, 0xFE95, 0xFEA7, 0xFEB8, 0xFEC8, 0xFED7, 0xFEE6, 0xFEF3, 
	0xFF00, 0xFF0C, 0xFF18, 0xFF23, 0xFF2E, 0xFF38, 0xFF42, 0xFF4C, 
	0xFF55, 0xFF5E, 0xFF67, 0xFF6F, 0xFF77, 0xFF7F, 0xFF87, 0xFF8F, 
	0xFF96, 0xFF9D, 0xFFA4, 0xFFAB, 0xFFB2, 0xFFB9, 0xFFC0, 0xFFC7, 
	0xFFCD, 0xFFD4, 0xFFDA, 0xFFE0, 0xFFE7, 0xFFED, 0xFFF3, 0xFFFA, 
	0x0000, 0x0006, 0x000D, 0x0013, 0x0019, 0x0020, 0x0026, 0x002C, 
	0x0033, 0x0039, 0x0040, 0x0047, 0x004E, 0x0055, 0x005C, 0x0063, 
	0x006A, 0x0071, 0x0079, 0x0081, 0x0089, 0x0091, 0x0099, 0x00A2, 
	0x00AB, 0x00B4, 0x00BE, 0x00C8, 0x00D2, 0x00DD, 0x00E8, 0x00F4, 
	0x0100, 0x010D, 0x011A, 0x0129, 0x0138, 0x0148, 0x0159, 0x016B, 
	0x017F, 0x0194, 0x01AB, 0x01C4, 0x01DF, 0x01FD, 0x021D, 0x0242, 
	0x026A, 0x0298, 0x02CB, 0x0307, 0x034C, 0x039D, 0x03FE, 0x0474, 
	0x0507, 0x05C3, 0x06BE, 0x081C, 0x0A27, 0x0D8F, 0x145B, 0x28BC, 
};

//  Cotangent table. Range [-Pi/2:Pi/2[
const unsigned short g_Cotangent128[] = {
	0x0000, 0xFFFA, 0xFFF3, 0xFFED, 0xFFE7, 0xFFE0, 0xFFDA, 0xFFD4, 
	0xFFCD, 0xFFC7, 0xFFC0, 0xFFB9, 0xFFB2, 0xFFAB, 0xFFA4, 0xFF9D, 
	0xFF96, 0xFF8F, 0xFF87, 0xFF7F, 0xFF77, 0xFF6F, 0xFF67, 0xFF5E, 
	0xFF55, 0xFF4C, 0xFF42, 0xFF38, 0xFF2E, 0xFF23, 0xFF18, 0xFF0C, 
	0xFF00, 0xFEF3, 0xFEE6, 0xFED7, 0xFEC8, 0xFEB8, 0xFEA7, 0xFE95, 
	0xFE81, 0xFE6C, 0xFE55, 0xFE3C, 0xFE21, 0xFE03, 0xFDE3, 0xFDBE, 
	0xFD96, 0xFD68, 0xFD35, 0xFCF9, 0xFCB4, 0xFC63, 0xFC02, 0xFB8C, 
	0xFAF9, 0xFA3D, 0xF942, 0xF7E4, 0xF5D9, 0xF271, 0xEBA5, 0xD744, 
	0x7FFF, 0x28BC, 0x145B, 0x0D8F, 0x0A27, 0x081C, 0x06BE, 0x05C3, 
	0x0507, 0x0474, 0x03FE, 0x039D, 0x034C, 0x0307, 0x02CB, 0x0298, 
	0x026A, 0x0242, 0x021D, 0x01FD, 0x01DF, 0x01C4, 0x01AB, 0x0194, 
	0x017F, 0x016B, 0x0159, 0x0148, 0x0138, 0x0129, 0x011A, 0x010D, 
	0x0100, 0x00F4, 0x00E8, 0x00DD, 0x00D2, 0x00C8, 0x00BE, 0x00B4, 
	0x00AB, 0x00A2, 0x0099, 0x0091, 0x0089, 0x0081, 0x0079, 0x0071, 
	0x006A, 0x0063, 0x005C, 0x0055, 0x004E, 0x0047, 0x0040, 0x0039, 
	0x0033, 0x002C, 0x0026, 0x0020, 0x0019, 0x0013, 0x000D, 0x0006, 
};
// Size: 1024 bytes
